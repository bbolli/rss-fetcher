#!/usr/bin/env python

# fetches an RSS feed with enclosures, and submits any torrents found
# to the Transmission bittorrent client.

import os, re, urllib

from basefetcher import BaseRSSFetcher


class RSSFetcher(BaseRSSFetcher):

    def __init__(self, db_file=None):
        BaseRSSFetcher.__init__(self, db_file)
        self.dest_dir = '.'
        self.patterns = []

    def handle_entry(self, entry):
        if self.patterns:
            for p in self.patterns:
                if re.search(p, entry.title):
                    break
            else:
                self.log('! no pattern match for title "%s"' % entry.title, 1)
                return False
        self.log(entry, 3)
        if self.dry_run:
            return True
        for enclosure in entry.get('enclosures', []):
            if 'torrent' in enclosure.type:
                self.download(enclosure)
                return True # the first one is enough!

    def download(self, enclosure):
        dest = enclosure.href.split('/')[-1]
        if not dest.endswith('.torrent'):
            dest += '.torrent'
        destfile = self.path(dest)
        self.log('* Downloading %s' % dest, 1)
        torrent = open(destfile, 'w')
        torrent.write(urllib.urlopen(enclosure.href).read())
        torrent.close()

    def path(self, *suffixes):
        return os.path.join(self.dest_dir, *suffixes)

if __name__ == '__main__':
    import optparse
    p = optparse.OptionParser(usage='Usage: %prog [options] <feed-url> [<filter-regex>...]')
    p.add_option('-d', '--dest-dir',
        help='save enclosures and the timestamps in DEST', metavar='DEST'
    )
    p.add_option('-f', '--force', action='store_true',
        help='redo entries that have already been seen'
    )
    p.add_option('-D', '--debug', type='int', help='set the logging level')
    p.add_option('-n', '--dry-run', action='store_true',
        help="don't download any enclosures or update timestamps"
    )
    p.set_defaults(dest_dir='.', force=False, debug=0, dry_run=False)
    opts, args = p.parse_args()
    if not args:
        p.error('Feed URL missing')

    f = RSSFetcher()
    f.dest_dir = opts.dest_dir
    f.force = opts.force
    f.debug = opts.debug
    f.dry_run = opts.dry_run
    f.patterns = args[1:]
    try:
        f.fetch(args[0])
    finally:
        f.close()
