#!/usr/bin/env python

# fetches an RSS feed with enclosures, and submits any torrents found
# to the Transmission bittorrent client.

import sys, os, re, socket, httplib, urllib, time, pprint
import feedparser


class RSSFetcher:

    def __init__(self, dest_dir='', opts={}):
        self.dest_dir = dest_dir
        self.db_file = self.path('rss', 'rss-latest.py')
        self.db = {}
        self.url = None
        self.log_started = False
        for opt, default in (
            ('verbose', 0), ('force', False), ('dry_run', False)
        ):
            setattr(self, opt, opts.get(opt, default))
        try:
            db = open(self.db_file).read()
        except (IOError, OSError):
            db = '{}'
        try:
            self.db = eval(db, {}, {})
        except Exception, e:
            self.log(repr(e))
            sys.exit(2)

    def __del__(self):
        self.close()

    def close(self):
        if not self.dry_run and self.db_file:
            open(self.db_file, 'w').write(repr(self.db).replace('), ', '),\n ') + '\n')
            self.db_file = None

    def log(self, msg, level=0):
        if level > self.verbose:
            return
        if not self.log_started:
            print time.asctime()
            if self.url:
                print self.url
            self.log_started = True
        if type(msg) in (str, unicode):
            print msg
        else:
            pprint.pprint(msg)

    def path(self, *suffixes):
        return os.path.join(self.dest_dir, *suffixes)

    def fetch(self, url, patterns=[]):
        self.latest_updated = self.db.setdefault(url, 0)
        self.url = url
        feed = feedparser.parse(url)
        self.log(feed, 3)
        if not hasattr(feed, 'status'):
            self.log('! feed object has no status attribute:', 1)
            return self.log(feed, 1)
        if feed.status == 301:      # permanently redirected
            self.log('! Redirect: %s\n  ==>       %s' % (url, feed.href))
        elif feed.status == 410:    # gone
            self.log('! Gone: %s' % url)
            if url in self.db:
                del self.db[url]
            return
        elif feed.status != 200:
            self.log('* Status: %d' % feed.status)
        self.new_latest = self.latest_updated
        if patterns:
            entries = [e for e in feed.entries for p in patterns if re.search(p, e.title)]
        else:
            entries = feed.entries
        for entry in entries:
            self.get_entry(entry)
        self.db[url] = self.new_latest
        self.url = None

    def get_entry(self, entry):
        self.log(entry, 2)
        tm = time.mktime(entry.updated_parsed)
        if not self.force and tm <= self.latest_updated:
            return self.log('* Old entry, already looked at earlier: %s' % entry.title, 1)
        if self.new_latest < tm:
            self.log(entry.title)
            self.new_latest = tm
            self.log('* Updating latest date to %s' % time.ctime(tm), 1)
            for enclosure in [
                e for e in entry.get('enclosures', []) if 'torrent' in e.type
            ]:
                self.download(enclosure)

    def submit_to_transmission(self, enclosure):
        """Submit the enclosure to the Transmission RPC interface"""
        conn = httplib.HTTPConnection('localhost:9091')
        # the href must not be URL-encoded, or Transmission will barf
        url = '/transmission/rpc?method=torrent-add&filename=' + enclosure.href
        headers = {'User-Agent': 'fetcher/0.3 (+http://drbeat.li/py/)'}
        self.log('Submitting "%s" to Transmission' % enclosure.href)
        self.log('* Url: %s' % url, 1)
        if self.dry_run:
            return
        while True:
            try:
                self.log('* Headers: %r' % headers, 2)
                conn.request('GET', url, headers=headers)
                response = conn.getresponse()
                self.log(response.getheaders(), 3)
                reply = response.read()
                self.log(reply, 3)
            except (httplib.HTTPException, socket.error), e:
                return self.log('! during submission: %s' % e)
            if response.status == 200:      # ok
                break
            elif response.status == 409:    # Transmission's CSRF avoidance
                h = 'X-Transmission-Session-Id'
                headers[h] = response.getheader(h)
            else:                           # error
                return self.log('! %d %s\n%s\n\n%s' % (
                    response.status, response.reason,
                    '\n'.join(['%s: %s' % hv for hv in response.getheaders()]),
                    reply
                ))
        try:
            reply = eval(reply, {}, {})
        except Exception, e:
            self.log(reply)
            reply = {'result': 'exception: %s' % e}
        if reply['result'] == 'success':
            return True
        self.log(reply)

    def download(self, enclosure):
        dest = enclosure.href.split('/')[-1]
        if not dest.endswith('.torrent'):
            dest += '.torrent'
        destfile = self.path('rss', dest)
        self.log('! Downloading %s' % dest, 1)
        torrent = open(destfile, 'w')
        torrent.write(urllib.urlopen(enclosure.href).read())
        torrent.close()

if __name__ == '__main__':
    args = sys.argv[1:]
    if not args:
        print """Usage: %s [-v]... [-f] [-d] <feed-url> <filter-regex>...

Options:
    -v  be increasingly verbose
    -f  force; ignores timestamp
    -d  dry run; don't download the enclosure or update timestamps\n""" % sys.argv[0]
        sys.exit(1)
    opts = dict(
        verbose = args.count('-v'),
        force = ('-f' in args),
        dry_run = ('-d' in args),
    )
    f = RSSFetcher(os.path.join(os.path.expanduser('~'), 'Downloads', '1torrents'), opts)
    args = [a for a in args if not a.startswith('-')]
    f.fetch(args[0], args[1:])
    f.close()
